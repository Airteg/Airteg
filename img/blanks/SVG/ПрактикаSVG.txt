Рисуем окружность
Окружность рисуется с помощью тега circle. Пример кода:

<circle r="50"/>
Атрибут r — радиус окружности.

В отличие от предыдущих фигур, положение окружности в пространстве определяется координатами центра фигуры: атрибут cx задаёт положение по горизонтальной оси, cy — по вертикальной.

По умолчанию координаты центра окружности равны 0,0, поэтому она находится в верхнем левом углу. Подвинем фигуру:

<circle r="50" cx="100"cy="50%"/>
Значения можно задавать как в пикселях, так и в процентах. Процентные значения рассчитываются относительно размеров SVG-элемента.

Радиус и координаты можно задавать только атрибутами, с помощью CSS это сделать нельзя.


<rect width="50%" height="100" rx="50"ry="20"/>


<svg width="300" height="290">
  <rect width="300" height="181" fill="skyblue"/>
  <rect width="300" height="109" y="181" fill="yellowgreen"/>
  <rect width="10" height="40" x="79" y="217" ry="5" fill="black"/>
  <rect width="10" height="40" x="206" y="217" ry="5" fill="black"/>
  <circle r="100" cx="150"cy="157" fill="crimson"/>
  <circle r="80" cx="150"cy="157" fill="white"/>
  <circle r="60" cx="150"cy="157" fill="crimson"/>
  <circle r="40" cx="150"cy="157" fill="white"/>
  <circle r="20" cx="150"cy="157" fill="crimson"/>
  
</svg>
<!--Мы подумали, что вы могли соскучиться по испытаниям про биатлон и мишени, и вот — ещё мишень. Только теперь на SVG.

Нарисуйте мишень, используя circle и rect.

Цвета: yellowgreen, skyblue, white, crimson и black.

Все размеры и координаты кратны пяти.-->

Рисуем эллипс
Эллипс рисуется почти так же, как круг, но у него два радиуса: по горизонтальной оси — rx, и по вертикальной — ry.

<ellipse rx="30" ry="40%"/>
Расположение эллипса, так же как и для circle, задаётся с помощью cx и cy.

<ellipse rx="30" ry="40%" cx="50%"cy="50%"/>

<svg>
<ellipse rx="40%" ry="30" cx="50%"cy="80%" fill="yellowgreen"/>
</svg>

Испытание: удивлённый смайлик
Срочный заказ от Кекса: для его приложения «Кекстаграм» нужен удивлённый смайл в векторе, чтобы пользователи могли реагировать на самые удивительные фотки. Конечно, Кекс скачал набор смайликов, но они оказались недостаточно удивлёнными. А зачем вектор? Для ретины!

Используя круги и эллипсы нарисуйте удивленный смайл.

Цвета: lightgray, gold, white, black, crimson.

Все значения кратны пяти.

Рисуем линии
Линии рисуются с помощью тега line. Координаты начала линии задаются атрибутами x1 и y1, координаты конца — атрибутами x2 и y2. Координаты можно задавать в процентах.

Пример кода:

<line x1="220" y1="10" x2="20" y2="130"/>
Так как линия не образует фигуру с внутренним контуром, для отображения ей нужно задать не заливку, а обводку. Обводкой управляют два атрибута: stroke и stroke-width. Атрибут stroke задаёт цвет обводки, stroke-width — толщину линии.

<line x1="220" y1="20" x2="20" y2="90" stroke="violet"stroke-width="5" />
Результат:

Можно задать только цвет линии, тогда толщина обводки по умолчанию будет равна одному пикселю.
Испытание: арифметические знаки
Используя линии, нарисуйте арифметические знаки.

Цвета: teal, orangered, royalblue, purple и orange.

Все значения кратны пяти.

Рисуем ломаные линии
Ломаные линии рисуются с помощью тега polyline. Координаты точек на линии задаются в атрибуте points, как для polygon.

Пример кода:

<polyline points="10,135 100,10 55,135 10,10 105,135"/>
Результат:

Разница между polygon и polyline заключается в поведении обводки: у многоугольника обводка замыкается сама по себе (левая фигура), а у ломаной линии — остаётся незамкнутой (фигура справа):

Испытание: воздушные шары
Нарисуйте открытку с воздушными шарами, используя rect, circle, polygon, ellipse и polyline.

Цвета: lemonchiffon, crimson, gold, brown.

Все значения кратны пяти.

Это последнее испытание. В этом курсе мы рассмотрели простые формы и фигуры в SVG, а в следующих курсах разберёмся, как оформлять элементы SVG и задавать им размеры.
https://htmlacademy.ru/courses/130/run/15




Рисуем ломаные линии
Ломаные линии рисуются с помощью тега polyline. Координаты точек на линии задаются в атрибуте points, как для polygon.

Пример кода:

<polyline points="10,135 100,10 55,135 10,10 105,135"/>
Результат:

Разница между polygon и polyline заключается в поведении обводки: у многоугольника обводка замыкается сама по себе (левая фигура), а у ломаной линии — остаётся незамкнутой (фигура справа):




Заливки
В курсе про фигуры вы уже немного познакомились с возможностями оформления векторных фигур, теперь мы рассмотрим этот вопрос подробнее.

SVG-фигуры имеют богатые возможности оформления: им, как и HTML-элементам, можно задавать заливку цветом, градиентом или картинкой, но помимо этого также можно управлять отдельно прозрачностью заливки и обводки, а в качестве заливки можно использовать, например, текст.

Также интересные возможности имеет обводка. Например, можно управлять видом пунктирной обводки и сделать обводку точками, пунктиром или морзянкой, а ещё обводку можно сделать не только цветом, но также градиентом или картинкой.

Начнём с заливки. Если она не задана, по умолчанию фигура заполняется чёрным цветом:

<circle r="60" cx="150" cy="50%"></circle>
Цвет заливки задаётся атрибутом fill:

<circle r="60" cx="150" cy="50%" fill="gold"></circle>
либо аналогичным свойством в CSS:

circle {
  fill: gold;
}
Результат будет одинаковым:

Цвет можно задавать в любом удобном формате.






Прозрачность заливки
Управлять прозрачностью заливки можно с помощью свойства fill-opacity. Прозрачность также можно задавать как атрибутом, так и через CSS.

Значение задаётся числом от 0 до 1, например:

<rect width="150" height="100" fill="gold" fill-opacity="0.5"></rect>
rect {
  fill: gold;
  fill-opacity: 0.5;
}
Прозрачность работает для всех видов заливок, в том числе для градиентов и паттернов:


<svg width="300" height="150">

  <circle r="60" cx="75" cy="50%" fill="#ff7700"></circle>

  <circle r="60" cx="150" cy="50%" fill="hsla(50, 100%, 50%, 0.75)"></circle>

  <circle class="shape-fill" r="60" cx="225" cy="50%"></circle>

</svg>
CSS:
svg {
  border: 1px solid #dddddd;
}

.shape-fill {
fill: yellowgreen
}



Прозрачность заливки
Управлять прозрачностью заливки можно с помощью свойства fill-opacity. Прозрачность также можно задавать как атрибутом, так и через CSS.

Значение задаётся числом от 0 до 1, например:

<rect width="150" height="100" fill="gold" fill-opacity="0.5"></rect>
rect {
  fill: gold;
  fill-opacity: 0.5;
}
Прозрачность работает для всех видов заливок, в том числе для градиентов и паттернов:
<svg width="300" height="150">

  <circle r="60" cx="75" cy="50%" fill="#ff7700" fill-opacity="0.5"></circle>

  <circle r="60" cx="150" cy="50%" fill="hsla(50, 100%, 50%, 0.5)"></circle>

  <circle class="shape-opacity" r="60" cx="225" cy="50%"></circle>

</svg>
svg {
  border: 1px solid #dddddd;
}

.shape-opacity {
  fill: yellowgreen;
  fill-opacity: 0.75
}
Отсутствие заливки
Иногда бывает нужно полностью убрать заливку, например, если вам нужен только контур фигуры. Это можно сделать ключевым словом none, результатом будет полная прозрачность фигуры.

Обводки
Обводки задаются с помощью нескольких атрибутов, причём цвет и толщина обводки задаются отдельно. Цвет задаётся атрибутом stroke:

<circle r="60" cx="150" cy="50%" fill="none" stroke="orange"></circle>
либо через CSS:

circle {
  stroke: orange;
}
Результат будет одинаковым, у фигуры появится обводка толщиной один пиксель:

<svg width="300" height="150">

  <circle r="60" cx="75" cy="50%" fill="gold" stroke="darkorange"></circle>

  <circle class="shape-stroke" r="60" cx="225" cy="50%"></circle>

</svg>
svg {
  border: 1px solid #dddddd;
}

.shape-stroke {
  fill: lightseagreen;
  stroke: teal
}



Толщина обводки.
Для однопиксельной обводки достаточно задать только цвет в stroke. Если же нужно управлять толщиной обводки, это делается с помощью свойства stroke-width, также атрибутом или через CSS:

<circle r="60" cx="150" cy="50%" fill="none" stroke="orange"
stroke-width="5"></circle>
или:

circle {
  stroke: orange;
  stroke-width: 5;
}
Результат:

Короткой записи нет, поэтому цвет и толщина всегда задаются отдельно.

Если задавать значение в процентах, они будут рассчитываться не от размеров фигуры, а относительно размеров всего SVG, что может давать непредсказуемый результат.

Если обводке задана толщина, но не задан цвет, обводка не отобразится.

<svg width="300" height="150">

  <circle r="60" cx="75" cy="50%" fill="gold" stroke="darkorange" stroke-width="3"></circle>

  <circle class="shape-stroke-width" r="60" cx="225" cy="50%"></circle>

</svg>
svg {
  border: 1px solid #dddddd;
}

.shape-stroke-width {
  fill: lightseagreen;
  stroke: teal;
  stroke-width: 5%
}

Прозрачность обводки.
Прозрачность задаётся свойством stroke-opacity со значениями от 0 до 1, например: stroke-opacity="0.5".

Либо через CSS:

rect {
  stroke-opacity: 0.5;
}


Концы линий
В SVG можно указывать, как ведёт себя обводка на концах линий, это делается с помощью атрибута stroke-linecap. В примерах ниже мы добавили вспомогательные светлые линии с обводкой и показали возможные значения stroke-linecap:

1. butt — значение по умолчанию. С этим значением обводка просто заканчивается на концах линии:
2. round, с этим значением обводка равномерно закругляется вокруг концов линии:
3. square, с этим значением вокруг концов линии добавляется дополнительная обводка с прямоугольными краями:

В CSS внешним видом обводки на концах линий можно управлять с помощью аналогичного свойства stroke-linecap.

Вид сгибов
Атрибут stroke-linejoin позволяет управлять видом обводки на сгибах линий.

Аналогично прошлому заданию мы добавили «воображаемую» светлую линию в примеры. Итак, возможные значения stroke-linejoin:

1. miter — значение по умолчанию. Обводка в месте сгиба линии никак не видоизменяется.

2. round, обводка в месте сгиба линии равномерно закругляется.

3. bevel, обводка в месте сгиба линии складывается как лента.

В CSS внешним видом обводки на сгибах линий можно управлять с помощью аналогичного свойства stroke-linejoin.



Пунктирные линии, часть 1

В SVG можно управлять видом пунктирных линий, это делается с помощью атрибута stroke-dasharray. В качестве значения задаётся длина отрезков и пробелов между ними. Можно задать одно число, в этом случае получится пунктирная линия, состоящая из отрезков и пробелов одинаковой длины:

1. stroke-dasharray="15":

2. Если задать два числа stroke-dasharray="50 10", первое будет управлять длиной отрезков, второе — длиной пробелов:

3. Последовательность можно продолжить stroke-dasharray="1 2 3 5 8 13 21", в этом случае получится пунктирная линия со сложным ритмом:

Аналогично работает CSS-свойство stroke-dasharray.

Задайте первой линии атрибут stroke-dasharray="10"
а второй линии — со значением 50 15
В CSS третьей линии задайте свойство stroke-dasharray со значением 5 10 15 20
<svg width="300" height="200">

  <line x1="40" y1="50" x2="260" y2="50" stroke-width="10" stroke="tomato"  stroke-dasharray="10"></line>

  <line x1="40" y1="100" x2="260" y2="100" stroke-width="20" stroke="gold"  stroke-dasharray="50 15"></line>

  <line class="shape-dasharray" x1="40" y1="150" x2="260" y2="150" stroke-width="20" stroke="lightseagreen"></line>

</svg>
CSS:
svg {
  border: 1px solid #dddddd;
}
.shape-dasharray{
  stroke-dasharray:5 10 15 20;
}




Пунктирные линии, часть 2
Видом обводки круглой фигуры тоже можно управлять.

В отличие от прямоугольных форм сегменты пунктирной обводки круглой формы могут иметь неравномерную форму в зависимости от толщины обводки.

Давайте попробуем создать пунктирную обводку окружности и будем менять толщину, чтобы проследить, как меняется форма сегментов обводки.
Задайте фигуре .shape-stroke ширину обводки 10 и свойство stroke-dasharray со значением 10.
Измените значение stroke-dasharray на 20.
Измените значение ширины обводки на 50,
а затем на 100.

<svg width="300" height="300">

  <circle class="shape-stroke" r="50" cx="50%" cy="50%"></circle>

</svg>

CSS:
svg {
  border: 1px solid #dddddd;
}

.shape-stroke {
  fill: gold;
  stroke: darkorange;
  stroke-width:10;
  stroke-dasharray:10;
}




Спасательный круг, часть 1
В следующей серии заданий мы нарисуем спасательный круг с помощью простых форм, которые уже изучили.

Объект будет состоять из окружностей с применёнными к ним обводками.

Тему окружностей в SVG мы рассматривали в прошлом курсе.

В SVG создайте окружность с радиусом 70 и координатами центра по обеим осям 100
уберите заливку окружности и задайте цвет обводки lightgrey
а затем задайте толщину обводки 55:
<svg width="200" height="200">
<style>
svg {
  border: 1px solid #dddddd;
}
</style>
<circle r="70" cx="100" cy="100" fill="none" stroke="lightgrey" stroke-width="55"></circle>
</svg>
Спасательный круг, часть 2
Отлично, первый «слой» объекта готов. Он будет выступать серой рамкой спасательного круга.

Давайте теперь создадим второй слой, который будет являться «раскрашенной» частью круга. Обводка этого второго круга будет немного меньше, чем первого.
В SVG после первой окружности добавьте вторую с радиусом 70 и координатами центра по обеим осям 100
уберите заливку окружности и задайте цвет обводки tomato
а затем задайте толщину обводки 50:
<svg width="200" height="200">

  <circle r="70" cx="100" cy="100" fill="none" stroke="lightgrey" stroke-width="55"></circle>
  <circle r="70" cx="100" cy="100" fill="none" stroke="tomato" stroke-width="50"></circle>
</svg>
Спасательный круг, часть 3
Второй «слой» готов.

Остаётся создать третий слой белого цвета, который будет создавать полоски на спасательном круге. Пока что сделаем его со сплошной обводкой.
В SVG после второй окружности создайте третью с радиусом 70 и координатами центра по обеим осям 100
уберите заливку окружности и задайте цвет обводки white
а затем задайте толщину обводки 50:
<svg width="200" height="200">

  <circle r="70" cx="100" cy="100" fill="none" stroke="lightgrey" stroke-width="55"></circle>

  <circle r="70" cx="100" cy="100" fill="none" stroke="tomato" stroke-width="50"></circle>
  <circle r="70" cx="100" cy="100" fill="none" stroke="white" stroke-width="50"></circle>
</svg>
Спасательный круг, часть 4
Теперь все три «слоя» нашего рисунка готовы, и дело остаётся за малым.

Разрядим белую обводку последнего круга с помощью свойства stroke-dasharray, которое мы разбирали в одном из прошлых заданий.
Окружности с белой обводкой задайте атрибут stroke-dasharray="20"
а затем смените значение на 20 90:
<svg width="200" height="200">

  <circle r="70" cx="100" cy="100" fill="none" stroke="lightgrey" stroke-width="55"></circle>

  <circle r="70" cx="100" cy="100" fill="none" stroke="tomato" stroke-width="50"></circle>

  <circle r="70" cx="100" cy="100" fill="none" stroke="white" stroke-width="50" stroke-dasharray="20 90"></circle>

</svg>










Сдвиг обводки
Пунктирной обводке с помощью атрибута stroke-dashoffset можно задать сдвиг. Возьмём такой пример:

stroke-dasharray="50"

и добавим stroke-dashoffset: stroke-dasharray="50" stroke-dashoffset="25"

Пунктиры обводки сдвинулись на заданный отрезок по направлению против часовой стрелки. Значение stroke-dashoffset может быть отрицательным, и тогда обводка будет смещаться по часовой стрелке.

Аналогично работает CSS-свойство stroke-dashoffset.
Добавьте последнему кругу атрибут stroke-dashoffset="10", чтобы выровнять белые линии на спасательном круге.
<svg width="200" height="200">
  <circle r="70" cx="100" cy="100" fill="none" stroke="lightgrey" stroke-width="55"></circle>
  <circle r="70" cx="100" cy="100" fill="none" stroke="tomato" stroke-width="50"></circle>
  <circle r="70" cx="100" cy="100" 
  fill="none" 
  stroke="white" 
  stroke-width="50" 
  stroke-dasharray="20 90"
  stroke-dashoffset="10"
  ></circle>
</svg>

Испытание: леденец
Добавьте и измените элементам circle необходимые атрибуты, чтобы получился полосатый леденец.

Значения радиуса, толщины обводки, длины пунктира и пробела, а также сдвига обводки кратны 5.
Цвет леденца: gold.
Цвета полосок: tomato, darkorange, yellowgreen.
<svg width="300" height="290">
<style>
/* Используемые цвета:
  gold, tomato, darkorange, yellowgreen
*/

svg {
  border: 1px solid #dddddd;
}
.c0{
  fill:gold;
}
.c1{
  stroke:tomato;
  stroke-width:20;
  fill:none;
}
.c2{
  stroke:darkorange;
  stroke-width:20;
  stroke-dasharray:35;
  fill:none;
}
.c3{
  stroke:yellowgreen;
  stroke-width:20;
  fill:none;
}
</style>
  <rect fill="khaki" stroke="darkkhaki" width="10" height="70" x="145" y="220"></rect>
  <circle class="c0" stroke="darkkhaki" r="100" cx="150" cy="125"></circle>
  <circle class="c1" r="70" cx="150" cy="125"></circle>
  <circle class="c2" r="70" cx="150" cy="125"></circle>
  <circle class="c3" r="50" cx="150" cy="125"></circle>
</svg>


